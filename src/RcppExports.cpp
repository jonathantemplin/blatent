// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/blatent.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bernoulli_likelihood
NumericVector bernoulli_likelihood(DataFrame data, arma::mat beta, RObject formula, String varName);
RcppExport SEXP _blatent_bernoulli_likelihood(SEXP dataSEXP, SEXP betaSEXP, SEXP formulaSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< RObject >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_likelihood(data, beta, formula, varName));
    return rcpp_result_gen;
END_RCPP
}
// bernoulli_likelihood2
Rcpp::NumericVector bernoulli_likelihood2(DataFrame data, List parameters, RObject formula, String varName);
RcppExport SEXP _blatent_bernoulli_likelihood2(SEXP dataSEXP, SEXP parametersSEXP, SEXP formulaSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< RObject >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulli_likelihood2(data, parameters, formula, varName));
    return rcpp_result_gen;
END_RCPP
}
// bernoulliLikelihoodPtr
SEXP bernoulliLikelihoodPtr(std::string fstr);
RcppExport SEXP _blatent_bernoulliLikelihoodPtr(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(bernoulliLikelihoodPtr(fstr));
    return rcpp_result_gen;
END_RCPP
}
// testingLikeFunc
Rcpp::NumericVector testingLikeFunc(const SEXP& func, DataFrame data, List parameters, RObject formula, String varName);
RcppExport SEXP _blatent_testingLikeFunc(SEXP funcSEXP, SEXP dataSEXP, SEXP parametersSEXP, SEXP formulaSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type func(funcSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< RObject >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(testingLikeFunc(func, data, parameters, formula, varName));
    return rcpp_result_gen;
END_RCPP
}
// bin2dec_Rcpp
int bin2dec_Rcpp(NumericVector binaryVector, int nAttributes, NumericVector baseVector);
RcppExport SEXP _blatent_bin2dec_Rcpp(SEXP binaryVectorSEXP, SEXP nAttributesSEXP, SEXP baseVectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type binaryVector(binaryVectorSEXP);
    Rcpp::traits::input_parameter< int >::type nAttributes(nAttributesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type baseVector(baseVectorSEXP);
    rcpp_result_gen = Rcpp::wrap(bin2dec_Rcpp(binaryVector, nAttributes, baseVector));
    return rcpp_result_gen;
END_RCPP
}
// getMeanAndCov_HH2006L1
List getMeanAndCov_HH2006L1(arma::mat X, arma::mat W, arma::mat Y, arma::mat invBetaCov, arma::mat invBetaCovBetaMean);
RcppExport SEXP _blatent_getMeanAndCov_HH2006L1(SEXP XSEXP, SEXP WSEXP, SEXP YSEXP, SEXP invBetaCovSEXP, SEXP invBetaCovBetaMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invBetaCov(invBetaCovSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invBetaCovBetaMean(invBetaCovBetaMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(getMeanAndCov_HH2006L1(X, W, Y, invBetaCov, invBetaCovBetaMean));
    return rcpp_result_gen;
END_RCPP
}
// logdN01
double logdN01(const Rcpp::NumericVector& x, const Rcpp::List& pars, const Rcpp::DataFrame& data);
static SEXP _blatent_logdN01_try(SEXP xSEXP, SEXP parsSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(logdN01(x, pars, data));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _blatent_logdN01(SEXP xSEXP, SEXP parsSEXP, SEXP dataSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_blatent_logdN01_try(xSEXP, parsSEXP, dataSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_xptr
SEXP create_xptr(std::string fstr);
static SEXP _blatent_create_xptr_try(SEXP fstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fstr(fstrSEXP);
    rcpp_result_gen = Rcpp::wrap(create_xptr(fstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _blatent_create_xptr(SEXP fstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_blatent_create_xptr_try(fstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rks_Rcpp
NumericVector rks_Rcpp(int n, NumericVector r);
RcppExport SEXP _blatent_rks_Rcpp(SEXP nSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(rks_Rcpp(n, r));
    return rcpp_result_gen;
END_RCPP
}
// testFunc
double testFunc(double x);
RcppExport SEXP _blatent_testFunc(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testFunc(x));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_Rcpp
arma::mat rmvnorm_Rcpp(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _blatent_rmvnorm_Rcpp(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_Rcpp(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rtmvnormRejection_Rcpp
arma::mat rtmvnormRejection_Rcpp(arma::vec mu, arma::mat sigma, arma::mat D, int maxSample, arma::mat previous);
RcppExport SEXP _blatent_rtmvnormRejection_Rcpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP DSEXP, SEXP maxSampleSEXP, SEXP previousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type maxSample(maxSampleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type previous(previousSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnormRejection_Rcpp(mu, sigma, D, maxSample, previous));
    return rcpp_result_gen;
END_RCPP
}
// sampleBernoulliUnits
NumericVector sampleBernoulliUnits(DataFrame data, List variables, String varName);
RcppExport SEXP _blatent_sampleBernoulliUnits(SEXP dataSEXP, SEXP variablesSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type variables(variablesSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleBernoulliUnits(data, variables, varName));
    return rcpp_result_gen;
END_RCPP
}
// sampleMultivariateBernoulliUnits
DataFrame sampleMultivariateBernoulliUnits(DataFrame data, List variables, String varName);
RcppExport SEXP _blatent_sampleMultivariateBernoulliUnits(SEXP dataSEXP, SEXP variablesSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type variables(variablesSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMultivariateBernoulliUnits(data, variables, varName));
    return rcpp_result_gen;
END_RCPP
}
// sampleMultivariateBernoulliUnits2
DataFrame sampleMultivariateBernoulliUnits2(DataFrame data, List variables, String varName);
RcppExport SEXP _blatent_sampleMultivariateBernoulliUnits2(SEXP dataSEXP, SEXP variablesSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type variables(variablesSEXP);
    Rcpp::traits::input_parameter< String >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMultivariateBernoulliUnits2(data, variables, varName));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _blatent_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*logdN01)(const Rcpp::NumericVector&,const Rcpp::List&,const Rcpp::DataFrame&)");
        signatures.insert("SEXP(*create_xptr)(std::string)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _blatent_RcppExport_registerCCallable() { 
    R_RegisterCCallable("blatent", "_blatent_logdN01", (DL_FUNC)_blatent_logdN01_try);
    R_RegisterCCallable("blatent", "_blatent_create_xptr", (DL_FUNC)_blatent_create_xptr_try);
    R_RegisterCCallable("blatent", "_blatent_RcppExport_validate", (DL_FUNC)_blatent_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_blatent_bernoulli_likelihood", (DL_FUNC) &_blatent_bernoulli_likelihood, 4},
    {"_blatent_bernoulli_likelihood2", (DL_FUNC) &_blatent_bernoulli_likelihood2, 4},
    {"_blatent_bernoulliLikelihoodPtr", (DL_FUNC) &_blatent_bernoulliLikelihoodPtr, 1},
    {"_blatent_testingLikeFunc", (DL_FUNC) &_blatent_testingLikeFunc, 5},
    {"_blatent_bin2dec_Rcpp", (DL_FUNC) &_blatent_bin2dec_Rcpp, 3},
    {"_blatent_getMeanAndCov_HH2006L1", (DL_FUNC) &_blatent_getMeanAndCov_HH2006L1, 5},
    {"_blatent_logdN01", (DL_FUNC) &_blatent_logdN01, 3},
    {"_blatent_create_xptr", (DL_FUNC) &_blatent_create_xptr, 1},
    {"_blatent_rks_Rcpp", (DL_FUNC) &_blatent_rks_Rcpp, 2},
    {"_blatent_testFunc", (DL_FUNC) &_blatent_testFunc, 1},
    {"_blatent_rmvnorm_Rcpp", (DL_FUNC) &_blatent_rmvnorm_Rcpp, 3},
    {"_blatent_rtmvnormRejection_Rcpp", (DL_FUNC) &_blatent_rtmvnormRejection_Rcpp, 5},
    {"_blatent_sampleBernoulliUnits", (DL_FUNC) &_blatent_sampleBernoulliUnits, 3},
    {"_blatent_sampleMultivariateBernoulliUnits", (DL_FUNC) &_blatent_sampleMultivariateBernoulliUnits, 3},
    {"_blatent_sampleMultivariateBernoulliUnits2", (DL_FUNC) &_blatent_sampleMultivariateBernoulliUnits2, 3},
    {"_blatent_RcppExport_registerCCallable", (DL_FUNC) &_blatent_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_blatent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
